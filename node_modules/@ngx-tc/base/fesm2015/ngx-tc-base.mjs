import * as i0 from '@angular/core';
import { Component, Directive, Input, HostBinding, HostListener, NgModule } from '@angular/core';

class BaseComponent {
}
BaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.3", type: BaseComponent, selector: "tc-base", ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tc-base',
                    template: ''
                }]
        }] });

var align;
(function (align) {
    align["left"] = "left";
    align["center"] = "center";
    align["right"] = "right";
})(align || (align = {}));
var state;
(function (state) {
    state["default"] = "DEFAULT";
    state["hover"] = "HOVER";
    state["focus"] = "FOCUS";
    state["disabled"] = "DISABLED";
})(state || (state = {}));
var selectState;
(function (selectState) {
    selectState["default"] = "DEFAULT";
    selectState["hover"] = "HOVER";
    selectState["opened"] = "OPENED";
    selectState["disabled"] = "DISABLED";
})(selectState || (selectState = {}));

class AlignDirective {
    get leftAlign() { return this.tcAlign === align.left; }
    ;
    get centerAlign() { return this.tcAlign === align.center; }
    ;
    get rightAlign() { return this.tcAlign === align.right; }
    ;
}
AlignDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AlignDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
AlignDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: AlignDirective, selector: "[tcAlign]", inputs: { tcAlign: "tcAlign" }, host: { properties: { "class.left-align": "this.leftAlign", "class.center-align": "this.centerAlign", "class.right-align": "this.rightAlign" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: AlignDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcAlign]'
                }]
        }], propDecorators: { tcAlign: [{
                type: Input
            }], leftAlign: [{
                type: HostBinding,
                args: ['class.left-align']
            }], centerAlign: [{
                type: HostBinding,
                args: ['class.center-align']
            }], rightAlign: [{
                type: HostBinding,
                args: ['class.right-align']
            }] } });

class BgColorDirective {
    get class() {
        return 'custom-bg-color';
    }
    ;
    get getStyle() {
        return this.currentBg;
    }
    onMouseEnter() {
        this.currentBg = this.hoveredBg;
    }
    onMouseLeave() {
        this.currentBg = this.defaultBg;
    }
    ngOnInit() {
        this.setColors();
    }
    ngOnChanges() {
        this.setColors();
    }
    setColors() {
        const BG_COLOR = this.tcBgColor;
        if (!BG_COLOR)
            return null;
        this.defaultBg = (typeof BG_COLOR === 'string') ? BG_COLOR : BG_COLOR[0];
        this.hoveredBg = (typeof BG_COLOR === 'string') ? BG_COLOR : BG_COLOR[1];
        this.currentBg = this.defaultBg;
    }
}
BgColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BgColorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BgColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: BgColorDirective, selector: "[tcBgColor]", inputs: { tcBgColor: "tcBgColor" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()" }, properties: { "class": "this.class", "style.background": "this.getStyle" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BgColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcBgColor]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], getStyle: [{
                type: HostBinding,
                args: ['style.background']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], tcBgColor: [{
                type: Input
            }] } });

class BorderColorDirective {
    get class() {
        return 'custom-border-color';
    }
    ;
    ngOnInit() {
        const COLOR = this.tcBorderColor;
        this.defaultColor = (typeof COLOR === 'string') ? COLOR : COLOR[0];
        this.hoveredColor = (typeof COLOR === 'string') ? COLOR : COLOR[1];
        this.currentColor = this.defaultColor;
    }
    get getStyle() {
        return this.currentColor;
    }
    onMouseEnter() {
        this.currentColor = this.hoveredColor;
    }
    onMouseLeave() {
        this.currentColor = this.defaultColor;
    }
}
BorderColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BorderColorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BorderColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: BorderColorDirective, selector: "[tcBorderColor]", inputs: { tcBorderColor: "tcBorderColor" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()" }, properties: { "class": "this.class", "style.borderColor": "this.getStyle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BorderColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcBorderColor]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tcBorderColor: [{
                type: Input
            }], getStyle: [{
                type: HostBinding,
                args: ['style.borderColor']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });

class BorderStyleDirective {
    get class() {
        return 'custom-border-style';
    }
    ;
    ngOnInit() {
        const STYLE = this.tcBorderStyle;
        this.defaultStyle = (typeof STYLE === 'string') ? STYLE : STYLE[0];
        this.hoveredStyle = (typeof STYLE === 'string') ? STYLE : STYLE[1];
        this.currentStyle = this.defaultStyle;
    }
    get getStyle() {
        return this.currentStyle;
    }
    onMouseEnter() {
        this.currentStyle = this.hoveredStyle;
    }
    onMouseLeave() {
        this.currentStyle = this.defaultStyle;
    }
}
BorderStyleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BorderStyleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BorderStyleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: BorderStyleDirective, selector: "[tcBorderStyle]", inputs: { tcBorderStyle: "tcBorderStyle" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()" }, properties: { "class": "this.class", "style.borderStyle": "this.getStyle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BorderStyleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcBorderStyle]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tcBorderStyle: [{
                type: Input
            }], getStyle: [{
                type: HostBinding,
                args: ['style.borderStyle']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });

class ColorDirective {
    get class() {
        return 'custom-color';
    }
    ;
    get getStyle() {
        return this.currentColor;
    }
    onMouseEnter() {
        this.currentColor = this.hoveredColor;
    }
    onMouseLeave() {
        this.currentColor = this.defaultColor;
    }
    ngOnInit() {
        this.setColors();
    }
    ngOnChanges() {
        this.setColors();
    }
    setColors() {
        const COLOR = this.tcColor;
        if (!COLOR)
            return null;
        this.defaultColor = (typeof COLOR === 'string') ? COLOR : COLOR[0];
        this.hoveredColor = (typeof COLOR === 'string') ? COLOR : COLOR[1];
        this.currentColor = this.defaultColor;
    }
}
ColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ColorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ColorDirective, selector: "[tcColor]", inputs: { tcColor: "tcColor" }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()" }, properties: { "class": "this.class", "style.color": "this.getStyle" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcColor]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], getStyle: [{
                type: HostBinding,
                args: ['style.color']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], tcColor: [{
                type: Input
            }] } });

class FontSizeDirective {
    get class() {
        return 'custom-font-size';
    }
    ;
    get getFontSize() {
        const SIZE = this.tcFontSize;
        return (typeof SIZE === 'number') ? SIZE + 'px' : SIZE;
    }
    ;
}
FontSizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FontSizeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
FontSizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: FontSizeDirective, selector: "[tcFontSize]", inputs: { tcFontSize: "tcFontSize" }, host: { properties: { "class": "this.class", "style.fontSize": "this.getFontSize" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: FontSizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcFontSize]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tcFontSize: [{
                type: Input
            }], getFontSize: [{
                type: HostBinding,
                args: ['style.fontSize']
            }] } });

class GradientDirective {
    ngOnInit() {
        this.tcGradient.length >= 2 ? this.setGradient(this.tcGradient[0], this.tcGradient[1]) : null;
    }
    get getGradient() {
        return this.gradient;
    }
    get class() {
        return 'custom-gradient';
    }
    ;
    setGradient(firstColor, secondColor) {
        this.gradient = `linear-gradient(to right, ${firstColor} 0%, ${secondColor} 100%)`;
    }
}
GradientDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GradientDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
GradientDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: GradientDirective, selector: "[tcGradient]", inputs: { tcGradient: "tcGradient" }, host: { properties: { "style.backgroundImage": "this.getGradient", "class": "this.class" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: GradientDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcGradient]'
                }]
        }], propDecorators: { tcGradient: [{
                type: Input
            }], getGradient: [{
                type: HostBinding,
                args: ['style.backgroundImage']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class ShapeDirective {
    get class() {
        return 'custom-shape';
    }
    ;
    get getShape() {
        const SHAPE = this.tcShape;
        return (typeof SHAPE === 'number') ? SHAPE + 'px' : SHAPE;
    }
    ;
}
ShapeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ShapeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ShapeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.1.3", type: ShapeDirective, selector: "[tcShape]", inputs: { tcShape: "tcShape" }, host: { properties: { "class": "this.class", "style.borderRadius": "this.getShape" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ShapeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tcShape]'
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tcShape: [{
                type: Input
            }], getShape: [{
                type: HostBinding,
                args: ['style.borderRadius']
            }] } });

;

const controlProperties = {
    prefixValue: null,
    prefixColor: null,
    suffixValue: null,
    suffixColor: null,
    prefixIconValue: null,
    prefixIconColor: null,
    suffixIconValue: null,
    suffixIconColor: null,
    placeholderValue: '',
    placeholderColor: null
};

const list = [
    BaseComponent,
    ShapeDirective,
    ColorDirective,
    BgColorDirective,
    BorderColorDirective,
    BorderStyleDirective,
    GradientDirective
];
class TcBaseModule {
}
TcBaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TcBaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TcBaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TcBaseModule, declarations: [BaseComponent,
        ShapeDirective,
        ColorDirective,
        BgColorDirective,
        BorderColorDirective,
        BorderStyleDirective,
        GradientDirective], exports: [BaseComponent,
        ShapeDirective,
        ColorDirective,
        BgColorDirective,
        BorderColorDirective,
        BorderStyleDirective,
        GradientDirective] });
TcBaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TcBaseModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TcBaseModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ...list
                    ],
                    imports: [],
                    exports: [
                        ...list
                    ]
                }]
        }] });

/*
 * Public API Surface of base
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AlignDirective, BaseComponent, BgColorDirective, BorderColorDirective, BorderStyleDirective, ColorDirective, FontSizeDirective, GradientDirective, ShapeDirective, TcBaseModule, align, controlProperties, selectState, state };
//# sourceMappingURL=ngx-tc-base.mjs.map
